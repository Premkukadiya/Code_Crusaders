//first we need to randomly assign M/2 people at the gates

Function random_assignment(M,N,gates)

srand(time(nullptr))           //we need to change random values as time changes and we initialize time with 0

For( i=0 to M/2 )


gate_index = rand() % N        //generating any random gate index from N gates

gate[gate_index].push(i)       //adding attendee in the random gate index generated 
End For


For( i=0 to N-1 )

print( gate[i].size )           //printing number of people in each queue
End For
End function
Function Calculate_waiting_time(gate, P, N, waiting_time):
    For (i from 0 to N - 1)
        waiting_time[i] = gate[i].size() * P  // Calculate waiting time for each gate
       Print ("waiting time for a new attendee at ",i+1," gate ",waiting_time )
    End For
End Function
Function Waiting_time(gate, P, N, waiting_time):
    For (i from 0 to N - 1)
        waiting_time[i] = gate[i].size() * P  // Calculate waiting time for each gate
    End For
End Function

Function suggest_queue(N, waiting_time)
    min = waiting_time[0]
    Print "Suggested gates are "
    For (i from 0 to N - 1)
        If min >= waiting_time[i];
            min = waiting_time[i]
    End For
    For (i from 0 to N - 1)
        If waiting_time[i] == min;
            Print i + 1
            j=i   // the index of the gate with the minimum waiting time stored in new varriable

    End For
    Print "and for this gate waiting time is", min
   Return j  // the index of the gate with the minimum waiting time
End Function

function add_in_suggested_queue(int M, vector<int> & waiting_time,vector<queue<int>> &gate,int N,int P)
{
    int people

    if(M is even)
    people = M/2

    else 
    people = M/2+1

    for( int i=0 to People )
    {
        int index_gate = suggest_queue(N,waiting_time)
        gate[index_gate].push(i)

        for( int j =0 to N )
        if(gate[j].empty()==false)
        gate[i].pop

        End for
    }

    Waiting_time(gate,P,N,waiting_time)

    End for

}